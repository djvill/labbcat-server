lib-wait { position: absolute; }

.main-participant {
    font-weight: bold;
}
.highlight {
    background-color: yellow;
}
.layer-word {
    cursor: default;
    cursor: context-menu;
}
#word-menu {
    position: absolute;
    z-index: 10;
}
#word-menu .header {
    height: 18px;
}
.permalink:hover::after {
    content: ' ' url('/assets/link.svg#xywh=0,0,4,4') / 'ðŸ”—';
}
#previous-transcript-link {
    position: fixed;
    top: 50%;
    left: 0px;
    text-align: left;
}
#previous-transcript-link a:hover::after {
    content: attr(title);
    background-color: var(--theme-background-color);
}
#next-transcript-link {
    position: fixed;
    top: 50%;
    right: 0px;
    text-align: right;
}
#next-transcript-link a:hover::before {
    content: attr(title);
    background-color: var(--theme-background-color);
}
#previous-transcript-link img, #next-transcript-link img {
    width: 16px;
    height: 16px;
    vertical-align: middle;
}
/* consecutive blocks are vertical, simultaneous are horizontal */
#temporal-blocks .block {
    display: flex;
}
#temporal-blocks .consecutive {
    flex-direction: column;
}
#temporal-blocks .simultaneous {
    flex-direction: row;
}
#temporal-blocks .simultaneous .utterance {
    flex-grow: 1;
}
#temporal-blocks .consecutive, #temporal-blocks .simultaneous .utterance {
    border-left: 1px darkgray solid;
    border-bottom: 1px darkgray solid;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    margin: 5px;
    margin-top: 15px;
    padding: 5px;
}

/* only the first consecutive utterance, simultaneous utterances are all labelled */
.words {
    margin-left: 5%;
}
.words > .word  {
    padding-left: 0px;
    padding-right: 0px;
}
#temporal-blocks .block legend {
    display: block;
    font-style: italic;
    color: darkgray;
    position: relative;
    top: -12pt;
    margin-bottom: -12pt; /* so the legend doesn't displace the words below */
}
#temporal-blocks .consecutive legend {
    display: none;
}
#temporal-blocks .consecutive .utterance:first-child legend {
    display: block;
}

.token {
    display: inline-block;
}
.token .layer {
    display: flex;
    flex-direction: row;
}
.token .layer.span {
    display: flex;
    flex-direction: column;
}
.token .layer.span .annotation.during {
    border-top: 1px solid;
}
.token .layer.span .annotation.during label {
    position: absolute;
}
.token .layer.span .annotation.first {
    border-top: 1px solid;
    border-left: 1px solid;
    border-top-left-radius: 5px;
}
.token .layer.span.alignment-2 .annotation.last {
    border-top: 1px solid;
    border-right: 1px solid;
    border-top-right-radius: 5px;
}
.token .layer.span.alignment-2 .annotation.first.last {
    text-align: center;
}
.token .layer.span .annotation.first.last label {
    position: revert;
}
.token .layer.span .annotation.empty {
    border-top: 1px solid transparent;
}
.token .alignment-0 .annotation:not(:first-child) {
    position: fixed;
    opacity: 0;
}
.token .layer.span .annotation label.continued {
    margin-left: 10px;
}
.token .layer.span .annotation label.continued::before {
    content: 'â€¦ ';
}

.generate-layer {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}

/* Meta-data */

.tab-labels label {
    cursor: context-menu;
}
.tab-labels label img {
    width: 16px;
    height: 16px;
    vertical-align: middle;
}
.participants ul {
    list-style: circle;
    list-style-image: url('/assets/person.svg');
}
.formats ul {
    list-style: none;
}

#attributes {
    width: 100%;
}
.attribute .value .description {
    padding-left: 10px;
}
.attribute .value .description:before {
    content: '(';
}
.attribute .value .description:after {
    content: ')';
}
.attribute .value {
    max-width: 400px;
}
.attribute-list.tab-body {
    border: 1px var(--theme-text-color) solid;
    border-top: none;
    margin-left: -1px; /* to make annoying overshoot at least symmetrical */
}
.attribute-list .participant {
    padding: 5px;
}


/* Layout on wider screens */
@media all and (min-width: 640px) {
    lib-layer-checkboxes { /* layer selector is horizontal*/
        display: flex;
        flex-direction: row;
        justify-content: center;
    }
}
